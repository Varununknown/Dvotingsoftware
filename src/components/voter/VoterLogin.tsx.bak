import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useVoting } from '../../contexts/VotingContext';
import { ArrowLeft, Fingerprint, AlertCircle, CheckCircle, User, Smartphone, ShieldAlert } from 'lucide-react';

const VoterLogin = () => {
  const navigate = useNavigate();
  const { setCurrentUser } = useVoting();
  const [aadhaarId, setAadhaarId] = useState('');
  const [otp, setOtp] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanComplete, setScanComplete] = useState(false);
  const [error, setError] = useState('');
  const [step, setStep] = useState(1);
  const [webAuthnSupported, setWebAuthnSupported] = useState(false);
  
  // Check if WebAuthn is supported
  useEffect(() => {
    const checkWebAuthnSupport = () => {
      return window.PublicKeyCredential !== undefined;
    };
    setWebAuthnSupported(checkWebAuthnSupport());
  }, []);

  const handleAadhaarSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (aadhaarId.length === 12) {
      setStep(2);
    }
  };

  const handleOTPSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    if (otp.length === 6) {
      setStep(3);
    }
  };

  // Helper function for WebAuthn encoding - commented out
  /*
  function bufferToBase64url(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let str = '';
    for (const byte of bytes) {
      str += String.fromCharCode(byte);
    }
    return btoa(str)
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  }

  const handleSimulatedScan = async () => {
    setIsScanning(true);
    setError('');
    
    // Simulate the scan process timing
    setTimeout(async () => {
      try {
        const simulatedHash = 'fp_' + Math.random().toString(36).substring(2, 10);
        const response = await fetch('http://localhost:5000/api/webauthn/fingerprint/verify', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ aadhaarId, fingerprintHash: simulatedHash })
        });
        
        const data = await response.json();
        setIsScanning(false);
        
        if (response.ok) {
          setScanComplete(true);
          setCurrentUser({
            id: data.voterId,
            aadhaarId,
            isVerified: true,
            hasVoted: {}
          });
          setTimeout(() => navigate('/voter/dashboard'), 800);
        } else {
          setError(data.message || 'Fingerprint verification failed.');
          setScanComplete(false);
        }
      } catch (err) {
        console.error('Fingerprint error:', err);
        setError('Failed to process fingerprint. Please try again.');
        setIsScanning(false);
        setScanComplete(false);
      }
    }, 2500);
  };

  // WebAuthn implementation - commented out in favor of simulated scan
  /*
  const handleWebAuthnLogin = async () => {
    setIsScanning(true);
    setError('');
    
    try {
      // Step 1: Get authentication options from server
      const optionsResponse = await fetch('http://localhost:5000/api/webauthn/login/options', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ aadhaarId })
      });
      
      if (!optionsResponse.ok) {
        const error = await optionsResponse.json();
        throw new Error(error.message || 'Failed to get authentication options');
      }
      
      const options = await optionsResponse.json();
      
      // Step 2: Create assertion using device fingerprint sensor
      const assertion = await navigator.credentials.get({
        publicKey: {
          ...options,
          challenge: base64URLToUint8Array(options.challenge),
          allowCredentials: options.allowCredentials?.map((cred: any) => ({
            ...cred,
            id: base64URLToUint8Array(cred.id),
          })),
        },
      });
      
      if (!assertion) {
        throw new Error('No assertion returned from authenticator');
      }
      
      // Step 3: Send assertion to server for verification
      const credential = assertion as PublicKeyCredential;
      const response = credential.response as AuthenticatorAssertionResponse;
      
      // Safety check to ensure we have valid data before proceeding
      if (!credential || !response || !credential.rawId) {
        throw new Error('Invalid credential from authenticator');
      }
      
      const verificationResponse = await fetch('http://localhost:5000/api/webauthn/login/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          aadhaarId,
          assertionResponse: {
            id: credential.id,
            rawId: bufferToBase64url(credential.rawId as ArrayBuffer),
            type: credential.type,
            response: {
              authenticatorData: response.authenticatorData ? bufferToBase64url(response.authenticatorData) : '',
              clientDataJSON: response.clientDataJSON ? bufferToBase64url(response.clientDataJSON) : '',
              signature: response.signature ? bufferToBase64url(response.signature) : '',
              userHandle: response.userHandle ? bufferToBase64url(response.userHandle) : null,
            },
          },
        }),
      });
      
      const verificationResult = await verificationResponse.json();
      
      if (verificationResponse.ok && verificationResult.verified) {
        setScanComplete(true);
        setCurrentUser({
          id: verificationResult.voterId,
          aadhaarId,
          isVerified: true,
          hasVoted: {}
        });
        setTimeout(() => navigate('/voter/dashboard'), 800);
      } else {
        throw new Error(verificationResult.message || 'Verification failed');
      }
    } catch (err: any) {
      console.error('WebAuthn error:', err);
      
      // Try to extract the most informative error message
      let errorMsg = '';
      
      if (err.name === 'NotAllowedError') {
        errorMsg = 'You cancelled the fingerprint authentication.';
      } else if (err.name === 'NotSupportedError') {
        errorMsg = 'Your device fingerprint sensor isn\'t compatible. Try again with simulated scan.';
        setWebAuthnSupported(false);
      } else if (err.message && err.message.includes('Buffer')) {
        errorMsg = 'Server error processing credential data. Trying simulated scan instead.';
        // Fall back to simulated scan on buffer errors
        setWebAuthnSupported(false);
        setTimeout(() => handleSimulatedScan(), 500);
      } else {
        errorMsg = `${err.name || 'Error'}: ${err.message || 'Failed to process fingerprint. Please try again.'}`;
      }
      
      setError(errorMsg);
      setScanComplete(false);
    } finally {
      setIsScanning(false);
    }
  };
  */

  }
  */

  const handleFingerprintScan = async () => {
    // Always use simulated scan for reliable operation
    handleSimulatedScan();
    
    // Keep webAuthnSupported state for UI display purposes
    // but don't actually use WebAuthn functionality
    if (!webAuthnSupported) {
      console.log('WebAuthn not supported by this browser - using simulated scan');
    } else {
      console.log('Using simulated fingerprint scan for consistent experience');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 py-8">
      <div className="max-w-md mx-auto px-6">
        {/* Header */}
        <div className="flex items-center mb-8">
          <button
            onClick={() => navigate('/')}
            className="p-2 rounded-lg bg-white/70 backdrop-blur-sm border border-white/20 hover:bg-white/80 transition-colors duration-200"
          >
            <ArrowLeft className="h-5 w-5 text-slate-600" />
          </button>
          <h1 className="text-2xl font-bold text-slate-800 ml-4">Voter Login</h1>
        </div>

        {/* Main Card */}
        <div className="bg-white/70 backdrop-blur-sm border border-white/20 rounded-3xl p-8 shadow-xl">
          {step === 1 && (
            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <User className="h-8 w-8 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-slate-800 mb-4">Enter Aadhaar ID</h2>
              <p className="text-slate-600 mb-8">Enter your registered Aadhaar number to continue.</p>
              
              <form onSubmit={handleAadhaarSubmit}>
                <input
                  type="text"
                  value={aadhaarId}
                  onChange={(e) => setAadhaarId(e.target.value.replace(/\D/g, '').slice(0, 12))}
                  placeholder="Enter 12-digit Aadhaar ID"
                  className="w-full p-4 text-center text-lg font-mono border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6"
                  maxLength={12}
                  required
                />
                <button
                  type="submit"
                  disabled={aadhaarId.length !== 12}
                  className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 px-6 rounded-xl font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-blue-600 hover:to-blue-700 transition-colors duration-200"
                >
                  Continue
                </button>
              </form>
            </div>
          )}

          {step === 2 && (
            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <Smartphone className="h-8 w-8 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-slate-800 mb-4">OTP Verification</h2>
              <p className="text-slate-600 mb-8">Enter the OTP sent to your registered mobile number.</p>
              
              <form onSubmit={handleOTPSubmit}>
                <input
                  type="text"
                  value={otp}
                  onChange={(e) => setOtp(e.target.value.replace(/\D/g, '').slice(0, 6))}
                  placeholder="Enter 6-digit OTP"
                  className="w-full p-4 text-center text-lg font-mono border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 mb-6"
                  maxLength={6}
                  required
                />
                <button
                  type="submit"
                  disabled={otp.length !== 6}
                  className="w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-6 rounded-xl font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-green-600 hover:to-green-700 transition-colors duration-200"
                >
                  Verify OTP
                </button>
              </form>
            </div>
          )}

          {step === 3 && (
            <div className="text-center">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <Fingerprint className="h-8 w-8 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-slate-800 mb-4">Biometric Authentication</h2>
              <p className="text-slate-600 mb-6">Scan your fingerprint to complete login.</p>
              
              {webAuthnSupported && (
                <div className="flex items-center justify-center text-blue-600 mb-4 bg-blue-50 py-2 px-4 rounded-lg">
                  <ShieldAlert className="h-4 w-4 mr-2" />
                  <span className="text-xs font-medium">Using secure platform fingerprint sensor</span>
                </div>
              )}
              
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
                  <div className="flex items-center text-red-800">
                    <AlertCircle className="h-5 w-5 mr-2" />
                    <span className="font-medium">Authentication Failed</span>
                  </div>
                  <p className="text-red-700 text-sm mt-1">{error}</p>
                </div>
              )}
              
              <div className="relative mb-8">
                <div
                  className={`w-32 h-32 mx-auto border-4 rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 ${
                    isScanning
                      ? 'border-blue-500 bg-blue-50 animate-pulse'
                      : scanComplete
                      ? 'border-green-500 bg-green-50'
                      : error
                      ? 'border-red-500 bg-red-50'
                      : 'border-slate-300 bg-slate-50 hover:border-purple-500'
                  }`}
                  onClick={!isScanning ? handleFingerprintScan : undefined}
                >
                  {scanComplete ? (
                    <CheckCircle className="h-12 w-12 text-green-500" />
                  ) : error && !isScanning ? (
                    <AlertCircle className="h-12 w-12 text-red-500" />
                  ) : (
                    <Fingerprint 
                      className={`h-12 w-12 transition-colors duration-300 ${
                        isScanning ? 'text-blue-500' : error ? 'text-red-500' : 'text-slate-400'
                      }`} 
                    />
                  )}
                </div>
                
                {isScanning && (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="w-40 h-40 border-4 border-blue-500 border-t-transparent rounded-full animate-spin opacity-30"></div>
                  </div>
                )}
              </div>
              
              {!isScanning && (
                <button
                  onClick={handleFingerprintScan}
                  className="w-full bg-gradient-to-r from-purple-500 to-purple-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-purple-600 hover:to-purple-700 transition-colors duration-200"
                >
                  {error ? 'Try Again' : 'Scan Fingerprint'}
                </button>
              )}
              
              {isScanning && (
                <p className="text-blue-600 font-medium">Authenticating...</p>
              )}
              
              {scanComplete && (
                <p className="text-green-600 font-medium">Login successful! Redirecting...</p>
              )}
            </div>
          )}
        </div>

        {/* Register Link */}
        <div className="text-center mt-6">
          <p className="text-slate-600">
            New voter?{' '}
            <button
              onClick={() => navigate('/voter/register')}
              className="text-blue-600 font-medium hover:underline"
            >
              Register here
            </button>
          </p>
        </div>
      </div>
    </div>
  );
};

export default VoterLogin;